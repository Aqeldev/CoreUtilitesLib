package org.connecttag.utilities.global.deviceinfoimport android.os.Buildimport java.io.BufferedReaderimport java.io.Fileimport java.io.InputStreamReaderimport java.util.Localeclass SecurityInformation() {    var isVirtualDevice: Boolean? = null    var isDeviceRoot: Boolean? = null    init {        doStart()    }    fun doStart() {        try {            isVirtualDevice = verifyEmulator()        } catch (_: Exception) {        }        try {            isDeviceRoot = isRooted()        } catch (_: Exception) {        }    }    fun isDeviceRooted(): Boolean {        val buildTags = Build.TAGS        if (buildTags != null && buildTags.contains("test-keys")) {            return true        }        try {            val file = File("/system/app/Superuser.apk")            if (file.exists()) {                return true            }        } catch (e: Exception) {        }        return false    }    fun findBinary(binaryName: String): Boolean {        var found = false        if (!found) {            val places = arrayOf(                "/sbin/", "/system/bin/",                "/system/xbin/", "/data/local/xbin/",                "/data/local/bin/", "/system/sd/xbin/",                "/system/bin/failsafe/", "/data/local/"            )            for (where in places) {                if (File(where + binaryName).exists()) {                    found = true                    break                }            }        }        return found    }    private fun isRooted(): Boolean {        return findBinary()    }    private fun findBinary(): Boolean {        var found = false        if (!found) {            val places = arrayOf(                "/sbin/",                "/system/bin/",                "/system/xbin/",                "/data/local/xbin/",                "/data/local/bin/",                "/system/sd/xbin/",                "/system/bin/failsafe/",                "/data/local/"            )            for (where in places) {                if (File(where + "su").exists()) {                    found = true                    break                }            }        }        return found    }    fun findBinaryLocationPath(): String {        var path = "-"        var found = false        if (!found) {            val places = arrayOf(                "/sbin/",                "/system/bin/",                "/system/xbin/",                "/data/local/xbin/",                "/data/local/bin/",                "/system/sd/xbin/",                "/system/bin/failsafe/",                "/data/local/"            )            for (where in places) {                if (File(where + "su").exists()) {                    path = where + "su"                    found = true                    break                }            }        }        return path    }    fun isRootAvailableOnDevice(): Boolean {        for (pathDir in System.getenv("PATH")?.split(":".toRegex())?.dropLastWhile { it.isEmpty() }            ?.toTypedArray()!!) {            if (File(pathDir, "su").exists()) {                return true            }        }        return false    }    fun isBusyBoxInstalled(): Boolean {        return checkBinaryBusyBoxInstalled("busybox")    }    private fun checkBinaryBusyBoxInstalled(filename: String): Boolean {        val pathsArray = arrayOf(            "/data/local/",            "/data/local/bin/",            "/data/local/xbin/",            "/sbin/",            "/su/bin/",            "/system/bin/",            "/system/bin/.ext/",            "/system/bin/failsafe/",            "/system/sd/xbin/",            "/system/usr/we-need-root/",            "/system/xbin/"        )        var result = false        for (path in pathsArray) {            val completePath = path + filename            val f = File(completePath)            val fileExists = f.exists()            if (fileExists) {                result = true            }        }        return result    }    fun isRootGivenForDevice(): Boolean {        if (isRootAvailableOnDevice()) {            var process: Process? = null            try {                process = Runtime.getRuntime().exec(arrayOf("su", "-c", "id"))                val input = BufferedReader(InputStreamReader(process!!.inputStream))                val output = input.readLine()                if (output != null && output.lowercase(Locale.getDefault()).contains("uid=0"))                    return true            } catch (e: Exception) {                e.printStackTrace()            } finally {                process?.destroy()            }        }        return false    }    private fun verifyEmulator(): Boolean {        return (Build.FINGERPRINT.startsWith("generic")                || Build.FINGERPRINT.lowercase(Locale.ROOT).contains("vbox")                || Build.FINGERPRINT.lowercase(Locale.ROOT).contains("test-keys")                || Build.MODEL.contains("google_sdk")                || Build.MODEL.contains("Emulator")                || Build.MODEL.contains("Android SDK built for x86")                || Build.MANUFACTURER.contains("Genymotion")                || Build.BRAND.startsWith("generic") && Build.DEVICE.startsWith("generic")                || "google_sdk" == Build.PRODUCT)    }}