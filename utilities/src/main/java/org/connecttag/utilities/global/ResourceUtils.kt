package org.connecttag.utilities.globalimport android.content.Contextimport android.content.res.Configurationimport android.content.res.Resourcesimport androidx.annotation.DimenResimport java.util.Localeobject ResourceUtils {    fun getDrawableByStringName(context: Context, name: String): Int {        val drawableResourceId =            context.resources.getIdentifier(                name,                "drawable",                context.applicationContext.packageName            )        return drawableResourceId    }    object Color{ /*       fun getColor(context: Context, @ColorRes id: Int): Int {            return ContextCompat.getColor(context, id)        }*/        fun getDimensionInPx(context: Context, @DimenRes id: Int): Float {            return context.resources.getDimension(id)        }      /*  fun getDrawable(context: Context, @DrawableRes id: Int): Drawable? {            return ContextCompat.getDrawable(context, id)        }*/    }    object Language {        fun setLocaleLanguage(context: Context, lang: String) {            val locale = Locale(lang)            Locale.setDefault(locale)            val resources = context.resources            val configuration = resources.configuration            configuration.setLocale(locale)            resources.updateConfiguration(configuration, resources.displayMetrics)        }        private fun setCurrentLanguage(context: Context,language: String){            val config = context.resources.configuration            val locale = java.util.Locale(language)            java.util.Locale.setDefault(locale)            config.setLocale(locale)            context.createConfigurationContext(config)            context.resources.updateConfiguration(config, context.resources.displayMetrics)        }        private fun updateResources(context: Context, language: String): Context? {            val locale = Locale(language)            Locale.setDefault(locale)            val configuration: Configuration = context.resources.configuration            configuration.setLocale(locale)            configuration.setLayoutDirection(locale)            return context.createConfigurationContext(configuration)        }        private fun loadLocale(context: Context,lang: String) {            val locale = Locale(lang)            Locale.setDefault(locale)            val configuration = Configuration()            configuration.locale = locale            context.applicationContext.resources.updateConfiguration(                configuration,                context.applicationContext.resources.displayMetrics            )        }        private fun updateResourcesLegacy(context: Context, language: String): Context? {            val locale = Locale(language)            Locale.setDefault(locale)            val resources: Resources = context.resources            val configuration: Configuration = resources.configuration            configuration.locale = locale            configuration.setLayoutDirection(locale)            resources.updateConfiguration(configuration, resources.displayMetrics)            return context        }    }}